{"title":"Artificial Intelligence <code>assignment-4</code>","markdown":{"yaml":{"title":"Artificial Intelligence <code>assignment-4</code>","descrption":"Artificial Intelligence Assignment-4","author":"Poornima Bhatia","date":"April 4, 2024","categories":"LISP","foramt":null,"html":null,"code-fold":true},"headingText":"Queation 1. Write a function called my-insert that inserts a given element into a list at a given location (starting with position zero). If the entered location is negative then the function places the new element at the beginning of the list. If the entered location is greater than the length of the list, then the function places the new element at the end of the list.","containsRefs":false,"markdown":"\n\nLISP Programming\n\n\n(my-insert ‘a ‘(b c d e) 0) => (A B C D E)\n\n(my-insert ‘a ‘(b c d e) 3) => (B C D A E)\n\n(my-insert ‘a ‘(b c d e) 4) => (B C D E A)\n\n<pre>\n(format t \"Write a function called my-insert that inserts a given element into a list at a given\nlocation (starting with position zero). If the entered location is negative then the function places\nthe new element at the beginning of the list. If the entered location is greater than the length of\nthe list, then the function places the new element at the end of the list.~%\")\n\n(defun my-insert (element lst position)\n  (cond ((< position 0) (cons element lst))\n        ((>= position (length lst)) (append lst (list element)))\n        (t (append (subseq lst 0 position)\n                   (list element)\n                   (subseq lst position)))))\n(format t \"(my-insert 'a '(b c d e) 0) => ~{~a ~}~%\" (my-insert 'a '(b c d e) 0))\n(format t \"(my-insert 'a '(b c d e) 3) => ~{~a ~}~%\" (my-insert 'a '(b c d e) 3))\n(format t \"(my-insert 'a '(b c d e) 4) => ~{~a ~}~%\" (my-insert 'a '(b c d e) 4))  \n</pre>\n\n### Question 2. Write a function to remove duplicates from a list, the function is to be called myremv-dups. Note that the function is to retain the last instance of a duplicate element.\n\n(my-remv-dups ‘(a b a c a d)) => (B C A D)\n\n(my-remv-dups ‘(a b (a c) a d)) => (B (A C) A D)\n\n(my-remv-dups ‘(a b (b c) a (b c) d)) => (B A (B C) D)### Question 2: Write a function called greater that determines the greater number out of two numbers.\n\n<pre>\n(format t \"Write a function to remove duplicates from a list, the function is to be called my-\nremv-dups. Note that the function is to retain the last instance of a duplicate element.~%\")\n\n(defun my-remv-dups (list_1)\n   ;; Check if the input list is empty\n  (if (null list_1)\n      ;; If the list is empty, return nil\n      \"input list is empty\"\n  ;; Otherwise, continue with the removal of duplicates\n  ;; Reverse the input list and bind it to 'reversed'\n  (let ((reversed (reverse list_1)))\n    ;; Define a local function 'helper' with parameters 'list_1' and 'list_2'\n    (labels ((helper (list_1 list_2)\n               ;; If the list is empty, return nil\n               (cond ((null list_1) nil)\n                     ;; If the first element of the list is already list_2, skip it\n                     ((member (car list_1) list_2 :test #'equal)\n                      (helper (cdr list_1) list_2))\n                     ;; Otherwise, cons the first element to the result and update the 'list_2' list\n                     (t\n                      (cons (car list_1)\n                            (helper (cdr list_1) (cons (car list_1) list_2)))))))\n      ;; Reverse the result of 'helper' and return it\n      (reverse (helper reversed nil))))))\n\n(format t \"(my-remv-dups '()) => ~@[~a~:*~]~%\" (my-remv-dups '()))\n(format t \"(my-remv-dups '(a b a c a d)) => ~{~a ~}~%\" (my-remv-dups '(a b a c a d)))\n(format t \"(my-remv-dups '(a b (a c) a d)) => ~{~a ~}~%\" (my-remv-dups '(a b (a c) a d)))\n(format t \"(my-remv-dups '(a b (b c) a (b c) d)) => ~{~a ~}~%\" (my-remv-dups '(a b a (b c) a (b c) d)))\n</pre>\n","srcMarkdownNoYaml":"\n\nLISP Programming\n\n### Queation 1. Write a function called my-insert that inserts a given element into a list at a given location (starting with position zero). If the entered location is negative then the function places the new element at the beginning of the list. If the entered location is greater than the length of the list, then the function places the new element at the end of the list.\n\n(my-insert ‘a ‘(b c d e) 0) => (A B C D E)\n\n(my-insert ‘a ‘(b c d e) 3) => (B C D A E)\n\n(my-insert ‘a ‘(b c d e) 4) => (B C D E A)\n\n<pre>\n(format t \"Write a function called my-insert that inserts a given element into a list at a given\nlocation (starting with position zero). If the entered location is negative then the function places\nthe new element at the beginning of the list. If the entered location is greater than the length of\nthe list, then the function places the new element at the end of the list.~%\")\n\n(defun my-insert (element lst position)\n  (cond ((< position 0) (cons element lst))\n        ((>= position (length lst)) (append lst (list element)))\n        (t (append (subseq lst 0 position)\n                   (list element)\n                   (subseq lst position)))))\n(format t \"(my-insert 'a '(b c d e) 0) => ~{~a ~}~%\" (my-insert 'a '(b c d e) 0))\n(format t \"(my-insert 'a '(b c d e) 3) => ~{~a ~}~%\" (my-insert 'a '(b c d e) 3))\n(format t \"(my-insert 'a '(b c d e) 4) => ~{~a ~}~%\" (my-insert 'a '(b c d e) 4))  \n</pre>\n\n### Question 2. Write a function to remove duplicates from a list, the function is to be called myremv-dups. Note that the function is to retain the last instance of a duplicate element.\n\n(my-remv-dups ‘(a b a c a d)) => (B C A D)\n\n(my-remv-dups ‘(a b (a c) a d)) => (B (A C) A D)\n\n(my-remv-dups ‘(a b (b c) a (b c) d)) => (B A (B C) D)### Question 2: Write a function called greater that determines the greater number out of two numbers.\n\n<pre>\n(format t \"Write a function to remove duplicates from a list, the function is to be called my-\nremv-dups. Note that the function is to retain the last instance of a duplicate element.~%\")\n\n(defun my-remv-dups (list_1)\n   ;; Check if the input list is empty\n  (if (null list_1)\n      ;; If the list is empty, return nil\n      \"input list is empty\"\n  ;; Otherwise, continue with the removal of duplicates\n  ;; Reverse the input list and bind it to 'reversed'\n  (let ((reversed (reverse list_1)))\n    ;; Define a local function 'helper' with parameters 'list_1' and 'list_2'\n    (labels ((helper (list_1 list_2)\n               ;; If the list is empty, return nil\n               (cond ((null list_1) nil)\n                     ;; If the first element of the list is already list_2, skip it\n                     ((member (car list_1) list_2 :test #'equal)\n                      (helper (cdr list_1) list_2))\n                     ;; Otherwise, cons the first element to the result and update the 'list_2' list\n                     (t\n                      (cons (car list_1)\n                            (helper (cdr list_1) (cons (car list_1) list_2)))))))\n      ;; Reverse the result of 'helper' and return it\n      (reverse (helper reversed nil))))))\n\n(format t \"(my-remv-dups '()) => ~@[~a~:*~]~%\" (my-remv-dups '()))\n(format t \"(my-remv-dups '(a b a c a d)) => ~{~a ~}~%\" (my-remv-dups '(a b a c a d)))\n(format t \"(my-remv-dups '(a b (a c) a d)) => ~{~a ~}~%\" (my-remv-dups '(a b (a c) a d)))\n(format t \"(my-remv-dups '(a b (b c) a (b c) d)) => ~{~a ~}~%\" (my-remv-dups '(a b a (b c) a (b c) d)))\n</pre>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"ai-assignment-4.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":{"light":"minty"},"title":"Artificial Intelligence <code>assignment-4</code>","descrption":"Artificial Intelligence Assignment-4","author":"Poornima Bhatia","date":"April 4, 2024","categories":"LISP","foramt":null,"html":null},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}